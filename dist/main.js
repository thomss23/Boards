(()=>{"use strict";document.querySelector(".header");let t=document.querySelector("ul");function e(){if(0==this.getInitiatedNewProject()){this.setInitiatedNewProject(!0);let e=document.createElement("div");e.classList.add("user-input");let n=document.createElement("input"),i=document.createElement("div");i.classList.add("confirmation-buttons");let s=document.createElement("button"),r=document.createElement("button");s.classList.add("submit-btn"),s.textContent="Submit",r.classList.add("cancel-btn"),r.textContent="Cancel",i.appendChild(s),i.appendChild(r),e.appendChild(n),e.appendChild(i),t.appendChild(e)}}function n(){t.removeChild(t.lastChild)}class i{constructor(t,e,n,i,s){this.title=t,this.description=e,this.dueDate=n,this.priority=i,this.IsDone=s}getTitle(){return this.title}setTitle(t){this.title=t}setIsDone(t){this.IsDone=t}getIsDone(){return this.IsDone}toggleIsDone(){this.IsDone=!this.IsDone}}class s{entryList=[];constructor(t){this.name=t}addNewEntry(t,e,n,s){let r=new i(t,e,n,s,!1);this.entryList.push(r)}removeEntry(t){this.entryList.splice(t,1)}toggleIsDoneEntry(t){this.entryList[t].toggleIsDone()}getProjectName(){return this.name}}const r=document.querySelector(".header"),c=document.querySelector("body");var o;o=new class{projects=[];initiatedNewProject=!1;constructor(){}addNewProject(t){this.projects.push(t)}getProject(t){return this.projects[t]}getProjects(){return this.projects}setInitiatedNewProject(t){this.initiatedNewProject=t}getInitiatedNewProject(){return this.initiatedNewProject}},r.addEventListener("click",e.bind(o)),c.addEventListener("click",(t=>{"submit-btn"==t.target.className?(function(t,e){let i=new s(t);e.addNewProject(i),n(),function(t){let e=document.querySelector("ul"),n=document.createElement("li");n.textContent=t,e.appendChild(n)}(t)}(document.querySelector("input").value,o),o.setInitiatedNewProject(!1)):"cancel-btn"==t.target.className&&(o.setInitiatedNewProject(!1),n())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,