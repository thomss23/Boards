(()=>{"use strict";document.querySelector(".header");let e=document.querySelector("ul");function t(){let e=document.querySelectorAll(".project-name");[].forEach.call(e,(function(e){if(e.classList.contains("selected")){const t=e.parentElement;t.removeChild(t.lastChild),t.removeChild(t.lastChild),e.classList.remove("selected")}}))}function n(){if(0==this.getInitiatedNewProject()){t(),this.setInitiatedNewProject(!0);let n=document.createElement("div");n.classList.add("user-input");let c=document.createElement("input"),o=document.createElement("div");o.classList.add("confirmation-buttons");let s=document.createElement("button"),i=document.createElement("button");s.classList.add("submit-btn"),s.textContent="Submit",i.classList.add("cancel-btn"),i.textContent="Cancel",o.appendChild(s),o.appendChild(i),n.appendChild(c),n.appendChild(o),e.appendChild(n)}}function c(){e.removeChild(e.lastChild)}class o{constructor(e,t,n,c,o){this.title=e,this.description=t,this.dueDate=n,this.priority=c,this.IsDone=o}getTitle(){return this.title}setTitle(e){this.title=e}setIsDone(e){this.IsDone=e}getIsDone(){return this.IsDone}toggleIsDone(){this.IsDone=!this.IsDone}}class s{entryList=[];constructor(e){this.name=e}addNewEntry(e,t,n,c){let s=new o(e,t,n,c,!1);this.entryList.push(s)}removeEntry(e){this.entryList.splice(e,1)}toggleIsDoneEntry(e){this.entryList[e].toggleIsDone()}getProjectName(){return this.name}}document.querySelector(".card-container");const i=document.getElementById("todoModal"),r=document.querySelector(".header"),d=document.querySelector("body"),a=document.querySelector("body");let l=new class{projects=[];initiatedNewProject=!1;initiatedNewTodo=!1;initiatedDeleteProject=!1;selectedProject=!1;constructor(){}addNewProject(e){this.projects.push(e)}getProject(e){return this.projects[e]}getProjects(){return this.projects}setInitiatedNewProject(e){this.initiatedNewProject=e}getInitiatedNewProject(){return this.initiatedNewProject}getSelectedProject(){return this.selectedProject}setSelectedProject(e){this.selectedProject=e}};var u;u=l,r.addEventListener("click",n.bind(u)),d.addEventListener("click",(e=>{switch(e.target.className){case"submit-btn":let n=document.querySelector("input");n.value?(function(e,t){let n=new s(e);t.addNewProject(n),c(),function(e){let t=document.querySelector("ul"),n=document.createElement("li"),c=document.createElement("div");c.textContent=e,c.classList.add("project-name"),n.appendChild(c),t.appendChild(n)}(e)}(n.value,u),u.setInitiatedNewProject(!1)):n.value="Empty value not allowed";break;case"cancel-btn":u.setInitiatedNewProject(!1),c();break;case"project-name":u.getInitiatedNewProject()||(t(),function(e){let t=document.createElement("button");t.textContent="+",t.classList.add("addTodo");let n=document.createElement("button");n.textContent="-",n.classList.add("removeProject"),e.parentElement.appendChild(t),e.parentElement.appendChild(n)}(e.target),function(e){for(project in void 0){let e=document.createElement("div");e.classList.add("card"),e.textContent=project.getProjectName(),projectList.appendChild(newProject)}}(),e.target.classList.add("selected"));break;case"removeProject":removeProject()}})),a.addEventListener("click",(e=>{switch(e.target.className){case"addTodo":i.style.display="block";break;case"close":i.style.display="none"}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,